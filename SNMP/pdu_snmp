#!/usr/bin/php5
<?php
	// NWKits, PDU, V1.1
	$OIDPARENT = ".1.3.6.1.4.1.45407.1.2";
	$REQUEST = $argv[2];
	$METHOD = $argv[1];
	
	$PDU_DATA = file_get_contents("/tmp/pdu_status.txt");
	$PDU_DATA = explode("\n", $PDU_DATA);
	foreach($PDU_DATA as $key => $value){
		$PDU_DATA[$key] = explode(",", $value);
	}
	
	//print_r($PDU_DATA);
	
	// Get the root of the SNMP tree in here so the script can use it as the base for get next requests
	$DATA = array(array($OIDPARENT, "", ""));
	
	// Index of PDUs, this script only handles one.
	$DATA[] = array($OIDPARENT.".1", "", "");
	$DATA[] = array($OIDPARENT.".1.1", "integer", 1);
	
	// Matched Index of their connections
	$DATA[] = array($OIDPARENT.".2", "", "");
	$DATA[] = array($OIDPARENT.".2.1", "string", "not available");
	
	// Matched Index of the PDU's data
	$DATA[] = array($OIDPARENT.".3", "", "");
	$DATA[] = array($OIDPARENT.".3.1", "", "");
	
	// Device Name
	$DATA[] = array($OIDPARENT.".3.1.0", "string", $PDU_DATA[2][2]);
	
	// Voltages, Main and AUX
	$DATA[] = array($OIDPARENT.".3.1.1", "", "");
	$DATA[] = array($OIDPARENT.".3.1.1.1.1", "string", $PDU_DATA[3][0]);
	$DATA[] = array($OIDPARENT.".3.1.1.2.1", "string", $PDU_DATA[4][0]);
	$DATA[] = array($OIDPARENT.".3.1.1.3.1", "string", $PDU_DATA[4][1]);
	$DATA[] = array($OIDPARENT.".3.1.1.4.1", "string", $PDU_DATA[4][2]);
	$DATA[] = array($OIDPARENT.".3.1.1.5.1", "string", $PDU_DATA[4][3]);
	$DATA[] = array($OIDPARENT.".3.1.1.6.1", "string", $PDU_DATA[4][4]);
	$DATA[] = array($OIDPARENT.".3.1.1.7.1", "string", $PDU_DATA[4][5]);
	
	// Temperatures, onboard
	$DATA[] = array($OIDPARENT.".3.1.2", "", "");
	$DATA[] = array($OIDPARENT.".3.1.2.1.1", "string", $PDU_DATA[3][1]);
	
	// Index of ports
	$DATA[] = array($OIDPARENT.".3.1.3", "", "");
	$DATA[] = array($OIDPARENT.".3.1.3.1.1", "integer", $PDU_DATA[5][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.2.1", "integer", $PDU_DATA[6][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.3.1", "integer", $PDU_DATA[7][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.4.1", "integer", $PDU_DATA[8][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.5.1", "integer", $PDU_DATA[9][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.6.1", "integer", $PDU_DATA[10][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.7.1", "integer", $PDU_DATA[11][0]);
	$DATA[] = array($OIDPARENT.".3.1.3.8.1", "integer", $PDU_DATA[12][0]);
	
	// Port State
	$DATA[] = array($OIDPARENT.".3.1.4", "", "");
	$DATA[] = array($OIDPARENT.".3.1.4.1.1", "integer", $PDU_DATA[5][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.2.1", "integer", $PDU_DATA[6][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.3.1", "integer", $PDU_DATA[7][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.4.1", "integer", $PDU_DATA[8][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.5.1", "integer", $PDU_DATA[9][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.6.1", "integer", $PDU_DATA[10][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.7.1", "integer", $PDU_DATA[11][2]);
	$DATA[] = array($OIDPARENT.".3.1.4.8.1", "integer", $PDU_DATA[12][2]);
	
	// Port Names
	$DATA[] = array($OIDPARENT.".3.1.5", "", "");
	$DATA[] = array($OIDPARENT.".3.1.5.1.1", "string", $PDU_DATA[5][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.2.1", "string", $PDU_DATA[6][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.3.1", "string", $PDU_DATA[7][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.4.1", "string", $PDU_DATA[8][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.5.1", "string", $PDU_DATA[9][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.6.1", "string", $PDU_DATA[10][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.7.1", "string", $PDU_DATA[11][1]);
	$DATA[] = array($OIDPARENT.".3.1.5.8.1", "string", $PDU_DATA[12][1]);
	
	// Port Currents
	$DATA[] = array($OIDPARENT.".3.1.6", "", "");
	$DATA[] = array($OIDPARENT.".3.1.6.1.1", "string", $PDU_DATA[5][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.2.1", "string", $PDU_DATA[6][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.3.1", "string", $PDU_DATA[7][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.4.1", "string", $PDU_DATA[8][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.5.1", "string", $PDU_DATA[9][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.6.1", "string", $PDU_DATA[10][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.7.1", "string", $PDU_DATA[11][3]);
	$DATA[] = array($OIDPARENT.".3.1.6.8.1", "string", $PDU_DATA[12][3]);
	
	// Port Power
	$DATA[] = array($OIDPARENT.".3.1.7", "", "");
	$DATA[] = array($OIDPARENT.".3.1.7.1.1", "string", $PDU_DATA[5][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.2.1", "string", $PDU_DATA[6][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.3.1", "string", $PDU_DATA[7][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.4.1", "string", $PDU_DATA[8][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.5.1", "string", $PDU_DATA[9][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.6.1", "string", $PDU_DATA[10][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.7.1", "string", $PDU_DATA[11][4]);
	$DATA[] = array($OIDPARENT.".3.1.7.8.1", "string", $PDU_DATA[12][4]);
	
	// Port Overload
	$DATA[] = array($OIDPARENT.".3.1.8", "", "");
	$DATA[] = array($OIDPARENT.".3.1.8.1.1", "integer", $PDU_DATA[5][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.2.1", "integer", $PDU_DATA[6][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.3.1", "integer", $PDU_DATA[7][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.4.1", "integer", $PDU_DATA[8][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.5.1", "integer", $PDU_DATA[9][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.6.1", "integer", $PDU_DATA[10][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.7.1", "integer", $PDU_DATA[11][5]);
	$DATA[] = array($OIDPARENT.".3.1.8.8.1", "integer", $PDU_DATA[12][5]);
	
	// Port Voltage Control
	$DATA[] = array($OIDPARENT.".3.1.9", "", "");
	$DATA[] = array($OIDPARENT.".3.1.9.1.1", "integer", $PDU_DATA[5][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.2.1", "integer", $PDU_DATA[6][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.3.1", "integer", $PDU_DATA[7][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.4.1", "integer", $PDU_DATA[8][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.5.1", "integer", $PDU_DATA[9][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.6.1", "integer", $PDU_DATA[10][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.7.1", "integer", $PDU_DATA[11][6]);
	$DATA[] = array($OIDPARENT.".3.1.9.8.1", "integer", $PDU_DATA[12][6]);
	
	// If this was a SET request, just silently ignore it.
	if($METHOD == "-s"){
		exit(0);
	}
	
	// Handle GETNEXT request
	if($METHOD == "-n"){
		// Determine next value and dump it.
		foreach($DATA as $key => $value){
			if($value[0] == $REQUEST){
				$search = $key;
				break;
			}
		}
		if($search !== FALSE){
			$search++;
		}
		if($search == count($DATA)){
			$search == FALSE;
		}
	}else{ // Handle other (GET) requests
		foreach($DATA as $key => $value){
			if($value[0] == $REQUEST){
				$search = $key;
				break;
			}
		}
	}
	
	// Return format is OID\nTYPE(string)\nVALUE\n";
	if($search !== FALSE){
		echo $DATA[$search][0]."\n";
		echo $DATA[$search][1]."\n";
		echo $DATA[$search][2]."\n";
		exit(0);
	}
	
	exit(0);
?>
